{"version":3,"sources":["redux/user/userTypes.js","redux/user/userActions.js","redux/post/postTypes.js","redux/post/postActions.js","components/Users/UserTableColumns.js","utils/ColumnFilter.js","components/Users/Users.js","components/Posts/PostTableColumns.js","components/Posts/Posts.js","redux/user/userReducer.js","redux/post/postReducer.js","redux/rootReducer.js","redux/store.js","App.js","index.js"],"names":["FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","fetchUsers","dispatch","fetchUsersRequest","fetch","then","res","json","users","fetchUsersSuccess","catch","error","fetchUsersFailure","message","type","payload","FETCH_POSTS_REQUEST","FETCH_POSTS_SUCCESS","FETCH_POSTS_FAILURE","fetchPostsRequest","fetchPostsSuccess","posts","fetchPostsFailure","USER_TABLE_COLUMNS","Header","Footer","accessor","disableFilters","textAlign","Cell","row","style","value","disableSortBy","ColumnFilter","column","filterValue","setFilter","useState","setValue","onChange","useAsyncDebounce","undefined","e","target","Users","userData","useSelector","state","user","useDispatch","useEffect","history","useHistory","defaultColumn","React","useMemo","Filter","useTable","columns","data","useFilters","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","className","length","LinearProgress","data-testid","map","headerGroup","getHeaderGroupProps","headers","text-align","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","canFilter","getRowProps","onClick","push","original","id","handleRowClick","cells","cell","getCellProps","POST_TABLE_COLUMNS","Posts","userId","useParams","stateData","fetchPosts","find","obj","post","name","initialState","loading","reducer","action","rootReducer","combineReducers","userReducer","postReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","EnhancedApp","withRouter","path","exact","component","AppRouter","props","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.fcc211c3.chunk.js","sourcesContent":["export const FETCH_USERS_REQUEST = 'FETCH_USERS_REQUEST'\r\nexport const FETCH_USERS_SUCCESS = 'FETCH_USERS_SUCCESS'\r\nexport const FETCH_USERS_FAILURE = 'FETCH_USERS_FAILURE'","import {\r\n  FETCH_USERS_REQUEST,\r\n  FETCH_USERS_SUCCESS,\r\n  FETCH_USERS_FAILURE\r\n} from './userTypes'\r\n\r\nexport const fetchUsers = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchUsersRequest())\r\n    return fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(res => res.json())\r\n      .then(users => {\r\n        dispatch(fetchUsersSuccess(users))\r\n      })\r\n      .catch(error => {\r\n        dispatch(fetchUsersFailure(error.message))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchUsersRequest = () => {\r\n  return {\r\n    type: FETCH_USERS_REQUEST\r\n  }\r\n}\r\n\r\nexport const fetchUsersSuccess = users => {\r\n  return {\r\n    type: FETCH_USERS_SUCCESS,\r\n    payload: users\r\n  }\r\n}\r\n\r\nexport const fetchUsersFailure = error => {\r\n  return {\r\n    type: FETCH_USERS_FAILURE,\r\n    payload: error\r\n  }\r\n}","export const FETCH_POSTS_REQUEST = 'FETCH_POSTS_REQUEST'\r\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POSTS_SUCCESS'\r\nexport const FETCH_POSTS_FAILURE = 'FETCH_POSTS_FAILURE'","import axios from 'axios'\r\nimport {\r\n  FETCH_POSTS_REQUEST,\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_FAILURE\r\n} from './postTypes'\r\n\r\nexport const fetchPosts = (userId) => {\r\n  return (dispatch) => {\r\n    dispatch(fetchPostsRequest())\r\n    return fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`)\r\n      .then(res => res.json())\r\n      .then(posts => {\r\n        // response.data is the posts\r\n        dispatch(fetchPostsSuccess(posts))\r\n      })\r\n      .catch(error => {\r\n        // error.message is the error message\r\n        dispatch(fetchPostsFailure(error.message))\r\n      })\r\n  }\r\n}\r\n\r\nexport const fetchPostsRequest = () => {\r\n  return {\r\n    type: FETCH_POSTS_REQUEST\r\n  }\r\n}\r\n\r\nexport const fetchPostsSuccess = posts => {\r\n  return {\r\n    type: FETCH_POSTS_SUCCESS,\r\n    payload: posts\r\n  }\r\n}\r\n\r\nexport const fetchPostsFailure = error => {\r\n  return {\r\n    type: FETCH_POSTS_FAILURE,\r\n    payload: error\r\n  }\r\n}","export const USER_TABLE_COLUMNS = [\r\n  {\r\n    Header: 'Id',\r\n    Footer: 'Id',\r\n    accessor: 'id',\r\n    disableFilters: true,\r\n    textAlign: 'left'\r\n  },\r\n  {\r\n    Header: 'Name',\r\n    Footer: 'Name',\r\n    accessor: 'name',\r\n    Cell: row => <div style={{ textAlign: \"left\" }}>{row.value}</div>\r\n  },\r\n  {\r\n    Header: 'Email',\r\n    Footer: 'Email',\r\n    accessor: 'email',\r\n    disableFilters: true\r\n  },\r\n  {\r\n    Header: () => (<div style={{ textAlign:\"right\" }}>City</div>),\r\n    Footer: 'City',\r\n    accessor: 'address.city',\r\n    disableFilters: true,\r\n    disableSortBy: true,\r\n    Cell: row => <div style={{ textAlign: \"right\" }}>{row.value}</div>\r\n  },\r\n  {\r\n    Header: () => (<div style={{ textAlign:\"right\" }}>Company</div>),\r\n    Footer: 'Company',\r\n    accessor: 'company.name',\r\n    disableFilters: true,\r\n    disableSortBy: true,\r\n    Cell: row => <div style={{ textAlign: \"right\" }}>{row.value}</div>\r\n  },\r\n]","import React, { useState } from 'react'\r\nimport { useAsyncDebounce } from 'react-table'\r\n\r\nexport const ColumnFilter = ({ column }) => {\r\n  const { filterValue, setFilter } = column\r\n  const [value, setValue] = useState(filterValue)\r\n  const onChange = useAsyncDebounce(value => {\r\n    setFilter(value || undefined)\r\n  }, 500)\r\n  return (\r\n    <span>\r\n      Search:{' '}\r\n      <input\r\n        value={value || ''}\r\n        onChange={e => {\r\n          setValue(e.target.value);\r\n          onChange(e.target.value);\r\n        }}\r\n      />\r\n    </span>\r\n  )\r\n}","import React, { useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useTable, useSortBy, useFilters } from 'react-table'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\n\r\nimport { fetchUsers } from '../../redux'\r\nimport { USER_TABLE_COLUMNS } from './UserTableColumns'\r\nimport { ColumnFilter } from '../../utils/ColumnFilter'\r\n\r\nconst Users = () => {\r\n  // redux state and dispatch\r\n  const userData = useSelector(state => state.user)\r\n  const dispatch = useDispatch()\r\n  useEffect(() => { dispatch(fetchUsers())}, [])\r\n\r\n  const history = useHistory()\r\n  const handleRowClick = (row) => {\r\n    history.push(`/posts/${row.original.id}`)\r\n  }\r\n\r\n  //react-table setup\r\n  const defaultColumn = React.useMemo(() => ({ Filter: ColumnFilter }), [])\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\r\n    {\r\n      columns: USER_TABLE_COLUMNS,\r\n      data: userData.users,\r\n      defaultColumn\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  )\r\n\r\n  return (\r\n    <div className='userWrapper'>\r\n      { userData.users.length === 0 ? <LinearProgress /> :\r\n        <table {...getTableProps()} data-testid='userTable'>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th text-align={column.textAlign} {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map(row => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr {...row.getRowProps()} onClick={() => handleRowClick(row)} >\r\n                  {row.cells.map(cell => {\r\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table> }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Users\r\n","export const POST_TABLE_COLUMNS = [\r\n  {\r\n    Header: 'Title',\r\n    Footer: 'Title',\r\n    accessor: 'title',\r\n    disableFilters: true,\r\n    Cell: row => <div style={{ textAlign: \"left\" }}>{row.value}</div>\r\n  },\r\n  {\r\n    Header: 'Body',\r\n    Footer: 'Body',\r\n    accessor: 'body',\r\n    disableFilters: true\r\n  }\r\n]","import React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { useTable, useSortBy, useFilters } from 'react-table'\r\nimport LinearProgress from '@material-ui/core/LinearProgress'\r\n\r\nimport { fetchPosts, fetchUsers } from '../../redux'\r\nimport { POST_TABLE_COLUMNS } from './PostTableColumns'\r\nimport { ColumnFilter } from '../../utils/ColumnFilter'\r\n\r\nconst Posts = () => {\r\n  const { userId } = useParams()\r\n\r\n  const stateData = useSelector(state => state)\r\n  const dispatch = useDispatch()\r\n  useEffect(() => { dispatch(fetchUsers()) }, [])\r\n  useEffect(() => { dispatch(fetchPosts(userId)) }, [])\r\n\r\n  //get username by userId\r\n  const user = stateData.user.users.find(obj => {\r\n    return obj.id == userId\r\n  })\r\n\r\n  //react-table setup\r\n  const defaultColumn = React.useMemo(() => ({ Filter: ColumnFilter }), [])\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = useTable(\r\n    {\r\n      columns: POST_TABLE_COLUMNS,\r\n      data: stateData.post.posts,\r\n      defaultColumn\r\n    },\r\n    useFilters,\r\n    useSortBy\r\n  )\r\n\r\n  return (\r\n    <div className='postWrapper'>\r\n      { stateData.user.users.length !== 0 ? <div className='postHeader'>{user.name}'s Posts</div> : null}\r\n      { stateData.post.posts.length === 0 ? <LinearProgress /> :\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map(headerGroup => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map(column => (\r\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\r\n                    {column.render('Header')}\r\n                    <span>\r\n                      {column.isSorted\r\n                        ? column.isSortedDesc\r\n                          ? ' 🔽'\r\n                          : ' 🔼'\r\n                        : ''}\r\n                    </span>\r\n                    <div>{column.canFilter ? column.render('Filter') : null}</div>\r\n                  </th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map(row => {\r\n              prepareRow(row)\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map(cell => {\r\n                    return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\r\n                  })}\r\n                </tr>\r\n              )\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Posts\r\n","import {\r\n  FETCH_USERS_REQUEST,\r\n  FETCH_USERS_SUCCESS,\r\n  FETCH_USERS_FAILURE\r\n} from './userTypes'\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  users: [],\r\n  error: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_USERS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case FETCH_USERS_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        users: action.payload,\r\n        error: ''\r\n      }\r\n    case FETCH_USERS_FAILURE:\r\n      return {\r\n        loading: false,\r\n        users: [],\r\n        error: action.payload\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default reducer","import {\r\n  FETCH_POSTS_REQUEST,\r\n  FETCH_POSTS_SUCCESS,\r\n  FETCH_POSTS_FAILURE\r\n} from './postTypes'\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  posts: [],\r\n  error: ''\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_POSTS_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      }\r\n    case FETCH_POSTS_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        posts: action.payload,\r\n        error: ''\r\n      }\r\n    case FETCH_POSTS_FAILURE:\r\n      return {\r\n        loading: false,\r\n        posts: [],\r\n        error: action.payload\r\n      }\r\n    default: return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { combineReducers } from 'redux'\r\nimport userReducer from './user/userReducer'\r\nimport postReducer from './post/postReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  user: userReducer,\r\n  post: postReducer\r\n})\r\n\r\nexport default rootReducer","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\n\r\nimport rootReducer from './rootReducer'\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n)\r\n\r\nexport default store","import React from 'react'\nimport { Provider } from 'react-redux'\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n  withRouter\n} from \"react-router-dom\";\n\nimport Users from './components/Users/Users'\nimport Posts from './components/Posts/Posts'\nimport store from './redux/store'\n\nimport './scss/styles.scss'\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <Switch>\n        <Route path='/' exact={true} component={Users} />\n        <Route path='/posts/:userId' exact={true} component={Posts} />\n      </Switch>\n    </Provider>\n  )\n}\nconst EnhancedApp = withRouter(App);\nconst AppRouter = props => (\n  <Router>\n    <EnhancedApp {...props} />\n  </Router>\n)\nexport default AppRouter\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}